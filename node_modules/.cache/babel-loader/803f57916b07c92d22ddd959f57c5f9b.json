{"ast":null,"code":"var _jsxFileName = \"/Users/Nathan/Projects/Evadon/react-toggle-switch-typescript/src/components/ToggleSwitch/index.tsx\",\n    _s = $RefreshSig$();\n\nimport classnames from \"classnames\";\nimport isBoolean from \"lodash/isBoolean\";\nimport isFunction from \"lodash/isFunction\";\nimport isString from \"lodash/isString\";\nimport React, { useCallback, useState } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToggleSwitch(_ref) {\n  _s();\n\n  let {\n    enabled: initialEnabled,\n    indeterminate: initialIndeterminate,\n    onClick,\n    onStateChanged,\n    theme,\n    className,\n    ...restProps\n  } = _ref;\n  const booleanFromProps = useCallback(bool => {\n    // let { enabled } = this.props;\n    // If enabled is a function, invoke the function\n    bool = isFunction(bool) ? bool() : bool; // Return enabled if it is a boolean, otherwise false\n\n    return isBoolean(bool) && bool;\n  }, []);\n  const [enabled, setEnabled] = useState(booleanFromProps(initialEnabled));\n  const [indeterminate, setIndeterminate] = useState(!!initialIndeterminate && booleanFromProps(initialIndeterminate)); // isEnabled = () => this.state.enabled;\n  // isIndeterminate = () => this.state.indeterminate;\n\n  const toggleSwitch = evt => {\n    evt.persist();\n    evt.preventDefault(); // const { onClick, onStateChanged } = this.props;\n\n    setEnabled(!enabled);\n    setIndeterminate(undefined); // Augument the event object with SWITCH_STATE\n\n    const switchEvent = Object.assign(evt, {\n      SWITCH_STATE: enabled\n    }); // Execute the callback functions\n\n    isFunction(onClick) && onClick(switchEvent);\n    isFunction(onStateChanged) && onStateChanged(enabled);\n  }; // Use default as a fallback theme if valid theme is not passed\n\n\n  const switchTheme = theme && isString(theme) ? theme : \"default\";\n  const switchClasses = classnames(`switch switch--${switchTheme}`, className);\n  let togglerClasses;\n\n  if (!indeterminate) {\n    togglerClasses = classnames(\"switch-toggle\", `switch-toggle--${enabled ? \"on\" : \"off\"}`);\n  } else {\n    togglerClasses = indeterminate ? classnames(\"switch-toggle\", \"switch-toggle--indeterminate\") : classnames(\"switch-toggle\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: switchClasses,\n    onClick: toggleSwitch,\n    ...restProps,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: togglerClasses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ToggleSwitch, \"rkV7tAn/uUubYwFjZUaN+kdTg+w=\");\n\n_c = ToggleSwitch;\nexport default ToggleSwitch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleSwitch\");","map":{"version":3,"names":["classnames","isBoolean","isFunction","isString","React","useCallback","useState","ToggleSwitch","enabled","initialEnabled","indeterminate","initialIndeterminate","onClick","onStateChanged","theme","className","restProps","booleanFromProps","bool","setEnabled","setIndeterminate","toggleSwitch","evt","persist","preventDefault","undefined","switchEvent","Object","assign","SWITCH_STATE","switchTheme","switchClasses","togglerClasses"],"sources":["/Users/Nathan/Projects/Evadon/react-toggle-switch-typescript/src/components/ToggleSwitch/index.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport isBoolean from \"lodash/isBoolean\";\nimport isFunction from \"lodash/isFunction\";\nimport isString from \"lodash/isString\";\nimport React, { useCallback, useState } from \"react\";\nimport \"./index.css\";\n\nfunction ToggleSwitch({\n  enabled: initialEnabled,\n  indeterminate: initialIndeterminate,\n  onClick,\n  onStateChanged,\n  theme,\n  className,\n  ...restProps\n}: {\n  enabled: boolean | (() => boolean);\n  indeterminate?: boolean | (() => boolean);\n  onClick?: () => void;\n  onStateChanged: ({ enabled }: { enabled: boolean }) => void;\n  theme: string;\n  className: string;\n} & React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>) {\n  const booleanFromProps = useCallback((bool: boolean | (() => boolean)) => {\n    // let { enabled } = this.props;\n\n    // If enabled is a function, invoke the function\n    bool = isFunction(bool) ? bool() : bool;\n\n    // Return enabled if it is a boolean, otherwise false\n    return isBoolean(bool) && bool;\n  }, []);\n\n  const [enabled, setEnabled] = useState<boolean>(\n    booleanFromProps(initialEnabled)\n  );\n  const [indeterminate, setIndeterminate] = useState<boolean | undefined>(\n    !!initialIndeterminate && booleanFromProps(initialIndeterminate)\n  );\n\n  // isEnabled = () => this.state.enabled;\n\n  // isIndeterminate = () => this.state.indeterminate;\n\n  const toggleSwitch = (evt: React.MouseEvent<HTMLDivElement>) => {\n    evt.persist();\n    evt.preventDefault();\n\n    // const { onClick, onStateChanged } = this.props;\n\n    setEnabled(!enabled);\n    setIndeterminate(undefined);\n\n    // Augument the event object with SWITCH_STATE\n    const switchEvent = Object.assign(evt, { SWITCH_STATE: enabled });\n\n    // Execute the callback functions\n    isFunction(onClick) && onClick(switchEvent);\n    isFunction(onStateChanged) && onStateChanged(enabled);\n  };\n\n  // Use default as a fallback theme if valid theme is not passed\n  const switchTheme = theme && isString(theme) ? theme : \"default\";\n\n  const switchClasses = classnames(`switch switch--${switchTheme}`, className);\n\n  let togglerClasses;\n  if (!indeterminate) {\n    togglerClasses = classnames(\n      \"switch-toggle\",\n      `switch-toggle--${enabled ? \"on\" : \"off\"}`\n    );\n  } else {\n    togglerClasses = indeterminate\n      ? classnames(\"switch-toggle\", \"switch-toggle--indeterminate\")\n      : classnames(\"switch-toggle\");\n  }\n\n  return (\n    <div className={switchClasses} onClick={toggleSwitch} {...restProps}>\n      <div className={togglerClasses}></div>\n    </div>\n  );\n}\n\nexport default ToggleSwitch;\n"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,OAAO,aAAP;;;AAEA,SAASC,YAAT,OAkBG;EAAA;;EAAA,IAlBmB;IACpBC,OAAO,EAAEC,cADW;IAEpBC,aAAa,EAAEC,oBAFK;IAGpBC,OAHoB;IAIpBC,cAJoB;IAKpBC,KALoB;IAMpBC,SANoB;IAOpB,GAAGC;EAPiB,CAkBnB;EACD,MAAMC,gBAAgB,GAAGZ,WAAW,CAAEa,IAAD,IAAqC;IACxE;IAEA;IACAA,IAAI,GAAGhB,UAAU,CAACgB,IAAD,CAAV,GAAmBA,IAAI,EAAvB,GAA4BA,IAAnC,CAJwE,CAMxE;;IACA,OAAOjB,SAAS,CAACiB,IAAD,CAAT,IAAmBA,IAA1B;EACD,CARmC,EAQjC,EARiC,CAApC;EAUA,MAAM,CAACV,OAAD,EAAUW,UAAV,IAAwBb,QAAQ,CACpCW,gBAAgB,CAACR,cAAD,CADoB,CAAtC;EAGA,MAAM,CAACC,aAAD,EAAgBU,gBAAhB,IAAoCd,QAAQ,CAChD,CAAC,CAACK,oBAAF,IAA0BM,gBAAgB,CAACN,oBAAD,CADM,CAAlD,CAdC,CAkBD;EAEA;;EAEA,MAAMU,YAAY,GAAIC,GAAD,IAA2C;IAC9DA,GAAG,CAACC,OAAJ;IACAD,GAAG,CAACE,cAAJ,GAF8D,CAI9D;;IAEAL,UAAU,CAAC,CAACX,OAAF,CAAV;IACAY,gBAAgB,CAACK,SAAD,CAAhB,CAP8D,CAS9D;;IACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcN,GAAd,EAAmB;MAAEO,YAAY,EAAErB;IAAhB,CAAnB,CAApB,CAV8D,CAY9D;;IACAN,UAAU,CAACU,OAAD,CAAV,IAAuBA,OAAO,CAACc,WAAD,CAA9B;IACAxB,UAAU,CAACW,cAAD,CAAV,IAA8BA,cAAc,CAACL,OAAD,CAA5C;EACD,CAfD,CAtBC,CAuCD;;;EACA,MAAMsB,WAAW,GAAGhB,KAAK,IAAIX,QAAQ,CAACW,KAAD,CAAjB,GAA2BA,KAA3B,GAAmC,SAAvD;EAEA,MAAMiB,aAAa,GAAG/B,UAAU,CAAE,kBAAiB8B,WAAY,EAA/B,EAAkCf,SAAlC,CAAhC;EAEA,IAAIiB,cAAJ;;EACA,IAAI,CAACtB,aAAL,EAAoB;IAClBsB,cAAc,GAAGhC,UAAU,CACzB,eADyB,EAExB,kBAAiBQ,OAAO,GAAG,IAAH,GAAU,KAAM,EAFhB,CAA3B;EAID,CALD,MAKO;IACLwB,cAAc,GAAGtB,aAAa,GAC1BV,UAAU,CAAC,eAAD,EAAkB,8BAAlB,CADgB,GAE1BA,UAAU,CAAC,eAAD,CAFd;EAGD;;EAED,oBACE;IAAK,SAAS,EAAE+B,aAAhB;IAA+B,OAAO,EAAEV,YAAxC;IAAA,GAA0DL,SAA1D;IAAA,uBACE;MAAK,SAAS,EAAEgB;IAAhB;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GA/EQzB,Y;;KAAAA,Y;AAiFT,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}